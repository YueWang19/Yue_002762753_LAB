/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Application;
import Model.Observation;
import Model.VitalSignHistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Yue
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    private Application application;
    DefaultTableModel viewTableModel;//import the default table model
    Observation selectedObservation;
    
    public ViewJPanel() {
        initComponents();
    }
    
    ViewJPanel(Application application){
        initComponents();
        
        this.application = application;
        this.viewTableModel = (DefaultTableModel) viewObservationTable.getModel();
        
        //display the vital sign observations
        displayObservations();
     
        
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fieldVitalSign = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldTemperature = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldBloodPressure = new javax.swing.JTextField();
        updateObservationBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewObservationTable = new javax.swing.JTable();
        viewObservationBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setText("View A Vital Sign");

        jLabel2.setText("ID");

        fieldVitalSign.setEnabled(false);

        jLabel3.setText("Temperature");

        jLabel4.setText("Blood Pressure");

        updateObservationBtn.setText("Update Observation");
        updateObservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateObservationBtnActionPerformed(evt);
            }
        });

        viewObservationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Temperature", "BP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewObservationTable);

        viewObservationBtn.setText("View Details");
        viewObservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewObservationBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel2))
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateObservationBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(fieldBloodPressure, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                                .addComponent(fieldTemperature, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fieldVitalSign, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewObservationBtn)
                .addGap(286, 286, 286))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(26, 26, 26)
                        .addComponent(updateObservationBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewObservationBtn)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewObservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewObservationBtnActionPerformed
        // TODO add your handling code here:
        // what was clicked and get the row in the table which was clicked
        int selectedRow = viewObservationTable.getSelectedRow();
        if( selectedRow >= 0) {
            //we can directly fetch the observation object from the zeroth position
            //set column 0 because the object was set to the index 0- ID column
            //change Observation observation to selectedObservation
            this.selectedObservation =(Observation) viewObservationTable.getValueAt(selectedRow, 0);//getValueAt(row,column) to get the detail
            //fill the text field
            fieldVitalSign.setText(String.valueOf(selectedObservation.getObservationId()));
            fieldBloodPressure.setText(String.valueOf(selectedObservation.getBloodPressure()));
            fieldTemperature.setText(String.valueOf(selectedObservation.getTemperature()));
            
        } else{
            // no selection made by user
            
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
    }//GEN-LAST:event_viewObservationBtnActionPerformed

    private void updateObservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateObservationBtnActionPerformed
        // TODO add your handling code here:
        //update the observation object
        
        // call the findObservation method
        //approach 1- set through the find observation
//        Observation o = this.application.getHistory().findObservation(Integer.valueOf(fieldVitalSign.getText()));
//        o.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
//        o.setTemperature(Double.valueOf(fieldTemperature.getText()));
//        
        //or
        // approach 2- set through the object selected
        // user the selectedObservation that we defined at the top of this class
        if(!fieldVitalSign.getText().isEmpty()){
        this.selectedObservation.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
        this.selectedObservation.setTemperature(Double.valueOf(fieldTemperature.getText()));
        } else {
            JOptionPane.showMessageDialog(null, "You have no selection!");
        }
        
        
        
    }//GEN-LAST:event_updateObservationBtnActionPerformed

    public void displayObservations(){
        VitalSignHistory history = this.application.getHistory();
        if(history.getVitalSignHistory().size() > 0){// .size() 
            //display
            viewTableModel.setRowCount(0);
            
            for (Observation  o : history.getVitalSignHistory()){
                // numbers of colums in the table is 3 and row should be framed
                Object row[] = new Object[3];
                row[0] = o;// after change the type of the table from int to Object,change here to o
                row[1] = o.getTemperature();
                row[2] = o.getBloodPressure();
                
                // add the row to the table
                viewTableModel.addRow(row);
                //System.out.println(o.getObservationId());
            }
        } else {
            System.out.println("Empty list!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldBloodPressure;
    private javax.swing.JTextField fieldTemperature;
    private javax.swing.JTextField fieldVitalSign;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updateObservationBtn;
    private javax.swing.JButton viewObservationBtn;
    private javax.swing.JTable viewObservationTable;
    // End of variables declaration//GEN-END:variables
}
